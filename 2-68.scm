(define (make-leaf symbol weight)
 (list 'leaf symbol weight))
(define (leaf? object)
 (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
 (list left
       right
       (append (symbols left) (symbols right))
       (+ (weight left) (weight right))))

(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
 (if (leaf? tree)
     (list (symbol-leaf tree))
     (caddr tree)))
(define (weight tree)
 (if (leaf? tree)
     (weight-leaf tree)
     (cadddr tree)))
(define (decode bits tree)
 (define (decode-1 bits current-branch)
  (if (null? bits)
      '()
      (let ((next-branch
             (choose-branch (car bits) current-branch)))
       (if (leaf? next-branch)
           (cons (symbol-leaf next-branch)
                 (decode-1 (cdr bits) tree))
           (decode-1 (cdr bits) next-branch)))))
 (decode-1 bits tree))
 (define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit" bit))))

(define (adjoin-set x set)
 (cond ((null? set) (list x))
       ((< (weight x) (weight (car set))) (cons x set))
       (else (cons (car set)
                   (adjoin-set x (cdr set))))))
(define (make-leaf-set pairs)
 (if (null? pairs)
  '()
  (let ((pair (car pairs)))
   (adjoin-set (make-leaf (car pair)
                          (cadr pair))
               (make-leaf-set (cdr pairs))))))
(make-leaf-set '((A 1) (B 4) (C 3) (D 2)))

(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree 
                    (make-leaf 'B 2)
                    (make-code-tree (make-leaf 'D 1)
                                    (make-leaf 'C 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
(define sample-decoded-message (decode sample-message sample-tree))

(define (encode-symbol symbol tree)
  (define (have? symbols2 symbol2)
    (cond ((null? symbols2) #f)
          ((eq? (car symbols2) symbol2) #t)
          (else (have? (cdr symbols2) symbol2))))
  (let ((left (left-branch tree)) (right (right-branch tree)))
  (cond ((and (leaf? left) (eq? symbol (symbol-leaf left))) (cons 0 '()))
        ((and (leaf? right) (eq? symbol (symbol-leaf right))) (cons 1 '()))
        ((have? (symbols left) symbol) (cons 0 (encode-symbol symbol left)))
        (else (cons 1 (encode-symbol symbol right))))))
    
(define (encode message tree)
  (if (null? message)
    '()
    (append (encode-symbol (car message) tree)
            (encode (cdr message) tree))))

#?=(encode sample-decoded-message sample-tree)
