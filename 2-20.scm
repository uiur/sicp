(define (concat as z)
  (if (null? as)
   (cons z '())
   (cons (car as) (concat (cdr as) z))))

(define (same-parity x . y)
 (define (iter z as bs)
  (cond ((null? bs) as)
   ((= (remainder (car bs) 2) z)
   (iter z (concat as (car bs)) (cdr bs)))
   (else (iter z as (cdr bs)))))
 (if (even? x)
  (iter 0 (cons x '()) y)
  (iter 1 (cons x '()) y)))
(print (same-parity 2 3 4 5 6 7 8))
