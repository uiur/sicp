(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))
(define (empty-deque? deque) (null? (front-ptr deque)))
(define (make-deque) (cons '() '()))
(define (front-deque deque)
 (if (empty-deque? deque)
  (error "FRONT called with an empty deque" deque)
  (car (front-ptr deque))))
(define (front-insert-deque! deque item)
 (let ((new-pair (cons '() (cons item '()))))
  (cond ((empty-deque? deque)
         (set-front-ptr! deque new-pair)
         (set-rear-ptr! deque new-pair)
         deque)
        (else
         (set-cdr! (cdr new-pair) (front-ptr deque))
         (set-car! (front-ptr deque) new-pair)
         (set-front-ptr! deque new-pair)
         deque))))
(define (front-delete-deque! deque)
 (cond ((empty-deque? deque)
        (error "DELETE! called with an empty deque" deque))
       (else
        (set-car! (cddr (front-ptr deque)) '())
        (set-front-ptr! deque (cddr (front-ptr deque)))
        deque)))
(define (rear-insert-deque! deque item)
 (let ((new-pair (cons '() (cons item '()))))
   (cond ((empty-deque? deque)
          (set-front-ptr! deque new-pair)
          (set-rear-ptr! deque new-pair)
          deque)
    (else
     (set-cdr! (cdr (rear-ptr deque)) new-pair)
     (set-car! new-pair (rear-ptr deque))
     (set-rear-ptr! deque new-pair)
     deque))))
(define (rear-delete-deque! deque)
 (cond ((empty-deque? deque)
        (error "DELETE! called with an empty deque" deque))
  (else 
   (set-cdr! (cdr (car (rear-ptr deque))) '())
   (set-rear-ptr! deque (car (rear-ptr deque)))
   deque)))

(define (print-deque deque)
 (define (to-list item)
  (cond ((null? item) '())
    (else 
     (cons (cadr item) (to-list (cddr item))))))
 (print (to-list (front-ptr deque))))
  
;;
(define deq (make-deque))
#?=(empty-deque? deq)
(print-deque (front-insert-deque! deq 'a))
(print-deque (front-insert-deque! deq 'b))
(print-deque (front-insert-deque! deq 'c))
(print-deque (front-delete-deque! deq))
(print-deque (rear-insert-deque! deq 'd))
(print-deque (rear-delete-deque! deq))
